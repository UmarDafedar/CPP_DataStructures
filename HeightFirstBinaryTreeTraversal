#include<iostream>
#include<queue>

using namespace std;

int lcount=0;

struct Node
{
 int data;
 Node* left;
 Node* right;
};

Node* CreateNode(int data)
{
 Node* newnode=new Node;
 newnode->data=data;
 newnode->left=nullptr;
 newnode->right=nullptr;
 return newnode;
}

Node* Insert(Node* inproot,int data)
{
 if(inproot==nullptr)
  inproot=CreateNode(data);
 else if(data<=inproot->data)
  inproot->left=Insert(inproot->left,data);
 else if(data>inproot->data)
  inproot->right=Insert(inproot->right,data);
 return inproot;
}


void PreOrderTraversal(Node* root)
{
 if(root==nullptr)
  return;
 
 cout<<root->data<<" ";
 PreOrderTraversal(root->left);
 PreOrderTraversal(root->right);
}

void InOrderTraversal(Node* root)
{
 if(root==nullptr)
  return;
 
 InOrderTraversal(root->left);
 cout<<root->data<<" ";
 InOrderTraversal(root->right);
}

void PostOrderTraversal(Node* root)
{
 if(root==nullptr)
  return;
 
 PostOrderTraversal(root->left);
 PostOrderTraversal(root->right);
 cout<<root->data<<" ";
 
}

int main()
{
 int random;
 int i=25;
 Node* root=nullptr;
 while(i>0)
 {
  random=1+rand()%100;
  cout<<random<<" ";
  root=Insert(root,random);
  i--;
 }
 cout<<endl;
 cout<<"PreOrderTraversal ";
 PreOrderTraversal(root);cout<<endl;
 cout<<"PostOrderTraversal ";
 PostOrderTraversal(root);cout<<endl;
 cout<<"InOrderTraversal ";
 InOrderTraversal(root);cout<<endl;
 
 return 0;
}
